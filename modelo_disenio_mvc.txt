@startuml

title Diagrama de clases de diseño. Arquitectura MVC

abstract class Rummy {
   #createView()
   #createLogic()
   +play()
}
class RummyConsole {
   
}

RummyConsole ..> LogicImplementation

Rummy <|-- RummyConsole 
class Logic {
   
}

Logic <|-- LogicImplementation

Rummy *--> Logic
Rummy *--> View
Logic *--> "1..n" AcceptorController
Logic ..> State
View --> AcceptorController

abstract class Controller {
  +setState(State)
  +getState()
  +next()
}

abstract class View {
   +interact(AcceptorController controller)
}

class ConsoleView  {
   
}

ControllerVisitor <|-- ConsoleView

View <|-- ConsoleView

RummyConsole ..> ConsoleView
ConsoleView *--> StartView
ConsoleView *--> PlayView
ConsoleView *--> ResumeView
ConsoleView *--> LoadView
ConsoleView *--> SaveView

View <|-- StartView
View <|-- PlayView
View <|-- ResumeView
View <|-- LoadView


Logic *--> SessionImplementation

Session <|-- SessionImplementation

interface Session {
  StateValue getState()
  void next()
  void setState(StateValue stateValue)
}
SessionImplementation *--> Game
SessionImplementation *--> GameRegistry
SessionImplementation *--> State

class SessionImplementation {
  +executeAction(input)
  +takeTurn()
  +changeTurn()
  +hasWinner()
  +play(numPlayers)
}

class State {
  
}

State *--> StateValue

Logic --> View
Controller <|-- AcceptorController
AcceptorController ..> ControllerVisitor

class AcceptorController {
   +accept(ControllerVisitor)
}

interface ControllerVisitor {
   #visit(StartController)
   #visit(PlayController)
   #visit(ResumeController)
   #visit(LoadController)
   #visit(SaveController)
}

AcceptorController <|-- StartController
AcceptorController <|-- PlayController
AcceptorController <|-- ResumeController
AcceptorController <|-- LoadController
AcceptorController <|-- SaveController

StartController <|-- StartControllerImpl
PlayController <|-- PlayControllerImpl
ResumeController <|-- ResumeControllerImpl
LoadController <|-- LoadControllerImpl
SaveController <|-- SaveControllerImpl

LogicImplementation *--> StartControllerImpl
LogicImplementation *--> PlayControllerImpl
LogicImplementation *--> ResumeControllerImpl
LogicImplementation *--> LoadControllerImpl
LogicImplementation *--> SaveControllerImpl

LogicImplementation *--> SessionImplDAO

class SessionImplDAO {

}

SessionImplDAO *--> GameDAO
SessionImplDAO --> SessionImplementation

GameDAO --> Game

class LoadController  {
  
}

enum StateValue {
   INIT
   IN_GAME
   RESUME
   LOAD
   SAVE
   EXIT
}

class Game {
  +executeAction(input)
  +setNumberPlayers(numPlayers)
  +takeTurn()
  +changeTurn()
  +hasWinner()
}

class GameRegistry {
    +void reset();
   +void register();
   +void undo();
   +void redo();
   +bool isRedoable();
   +bool isUndoable();
}

GameRegistry *--> "1..n" GameMemento
GameRegistry --> Game

@enduml
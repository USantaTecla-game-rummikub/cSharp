@startuml

title diagrama de clases de diseño



class Game {
  +set(GameMemento)
  +executeAction(string input)
  +getMemento()
  +takeTurn()
  +changeTurn()
  +hasWinner()
}


Game *--> Turn
Turn *--> Table
Turn *--> "2..4" Player
Table *--> Pounch
Table *--> "0..n" TilesGroup
Player --> Table
Player --> "n" Tile

Game --> Player

class Turn {
   -currentPlayer
   -turnsAfterEmptyPounch
   +take(): Player
   +change()
   +isEnd(): bool
   +getWinnerByPoints(): Player
   +hasWinnerByPoints(): bool
   +save(): SnapShot
   +restore(Snapshot)
   +getMemento(): GameMemento
   +restore(GameMemento)
}

Turn ..> GameMemento

class Table {
  +extract()
  +addTileToGroup(tile, groupIndex)
  +isValidInsertion(tile, groupIndex)
  +moveTileFromOriginToTarget(tile, originGroup, targetGroup)
  +isValidGroups(): bool
  +isEmptyPounch(): bool
  +hasGroup(indexGroup): bool
  +existTileInTable(tile): bool
}

class Pounch {
  +extract()
  +isEmpty(): bool
}

class Player {
  +extractTile()
  +executeAction()
  +isWinner()
  +getPoints()
  +isResume()
  +isEnd()
  +getLastAction()
  +executeAction(input)
}

abstract class TilesGroup {
   +addTile(tile)
   +isValid()
   +removeTile(Tile)
   +hasIndex(indexGroup):bool
   +getTile(tile): Tile
}

class Tile {
  +getNumber()
  +isNumberLessThan(tile)
  +isNumberGreaterThan(tile)
  +isColorEqualsTo(tile)
  +isNumberDistinctTo(tile)
  +isNumberLessOrEqualThan(tile)
  +isColorDistinct(tile)
  +isNumberEqualTo(tile)
  +clone(tile)
}

TilesGroup *--> "3..13" Tile

Player ..> CommandParser
interface IExpression {
   +interpret(IPlayerCommand)
}
CommandParser *--> IExpression
CommandParser ..> CommandString
CommandParser ..> SubcommandString

IExpression <|-- ExpPut
IExpression <|-- ExpMov
IExpression <|-- ExpEnd
IExpression <|-- ExpUndo
IExpression <|-- ExpRedo

ExpPut *--> "1..n" ExpPutIn
ExpMov *--> "1..n" ExpMovIn

ExpMovIn *--> Group: origin
ExpMovIn *--> Group: target
ExpPutIn *--> "1..n" ExpTileRack
ExpPutIn *--> Group: target

IExpression <|-- ExpPutIn
IExpression <|-- ExpTileRack
IExpression <|-- Group
IExpression <|-- ExpMovIn
IExpression <|-- ExpTileGroup

ExpMovIn *--> "1..n" ExpTileGroup

IPlayerCommand <|-- Player
CommandParser --> IPlayerCommand
IExpression ..> IPlayerCommand

interface IPlayerCommand {
  +addTileToGroup(tile, groupIndex) 
  +existGroup(targetGroup): bool
  +existTileInRack(tile): bool
  +existTileInTable(tile): bool
  +moveTileFromGroupToGroup(tile, origin, target)
  +isAllowedToTileDown(List<List<string>> tileGroups): bool
  +finishTurn();
  +existsTileInGroup(string tileDescription, int group):bool
  +isValidGroups(): bool
  +isValidAddTilesInGroup(List<string> tiles, int groupIndex): bool
}

Tile *--> Color
Tile *--> TileNumber

enum Color {
  RED,
  GREEN,
  BLACK,
  YELLOW,
  JOKER
}

enum TileNumber {
  ONE,
  TWO,
  THREE,
  FOUR,
  FIVE,
  SIX,
  SEVEN,
  EIGHT,
  NINE, 
  TEN,
  ELEVEN,
  TWELVE,
  THIRTEEN,
  JOKER
}

enum CommandString {
   PUT = "PUT",
   MOV = "MOV";
   END = "END";
   HELP = "HELP";
   UNDO = "UNDO";
   REDO = "REDO";
   RESUME = "RESUME";
   EXIT = "EXIT";
}
enum SubcommandString {
   IN = "IN",
   FROM = "FROM"
}


class GameMemento {
  +getPlayersNumber(): int
  +getCurrentPlayer(): int
  +getTurnsAfterEmptyPounch(): int
  +getPlayerState(playerIndex): string
  +getTilesPounch(): string
  +getTilesGroup(): string
}

@enduml